name: Rust CI/CD

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 代码质量检查
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libudev-dev

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  # 代码格式检查
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Clippy 代码检查
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libudev-dev

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  # 多平台测试
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # 排除一些组合以减少构建时间
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libudev-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS 通常不需要额外依赖，但可以在这里添加
          echo "No additional dependencies needed for macOS"

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows 可能需要特定的依赖
          echo "No additional dependencies needed for Windows"

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  # 构建和发布
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [check, fmt, clippy, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ftservo_sdk
            asset_name: ftservo_sdk-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ftservo_sdk.exe
            asset_name: ftservo_sdk-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ftservo_sdk
            asset_name: ftservo_sdk-macos-x86_64

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libudev-dev

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --verbose

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  # 发布到 GitHub Releases（仅在发布时）
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create release assets
        run: |
          for dir in ftservo_sdk-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              if [ -f "ftservo_sdk.exe" ]; then
                zip -r "../${dir}.zip" ftservo_sdk.exe
              else
                tar -czf "../${dir}.tar.gz" ftservo_sdk
              fi
              cd ..
            fi
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 代码覆盖率（可选）
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libudev-dev

      - name: Install tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest

      - name: Generate code coverage
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --verbose --all-features --workspace --timeout 120 --out Xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
